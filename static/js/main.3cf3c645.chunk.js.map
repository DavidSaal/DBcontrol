{"version":3,"sources":["components/Modal/index.js","components/Modal/Modal.jsx","App.js","index.js"],"names":["Modal","props","className","id","tabindex","aria-labelledby","aria-hidden","type","data-bs-dismiss","aria-label","scope","name","value","rowToUpdate","cName","onChange","rowToUpdateFunc","pName","mpr","onClick","updatedRow","App","useState","rows","setRows","loading","setLoading","newRow","setNewRow","setRowToUpdate","editRowClick","setEditRowClick","filter","setFilter","inputElement","useRef","fetchData","a","fetch","res","json","useEffect","then","canvas","current","click","handleNewRowValues","event","target","handleUpdateRowValues","handleFilterRowValues","addRow","method","headers","body","JSON","stringify","savedRow","status","alert","foundIndex","findIndex","x","_id","deleteRow","row","length","toLowerCase","includes","map","index","ref","data-bs-toggle","data-bs-target","data","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3cf3c645.chunk.js","sourcesContent":["import Modal from \"./Modal\";\r\n\r\nexport default Modal;\r\n","import React from \"react\";\r\n\r\nconst Modal = (props) => {\r\n  return (\r\n    <div\r\n      className=\"modal fade\"\r\n      id=\"exampleModal\"\r\n      tabindex=\"-1\"\r\n      aria-labelledby=\"exampleModalLabel\"\r\n      aria-hidden=\"true\"\r\n    >\r\n      <div className=\"modal-dialog  modal-xl modal-dialog-centered\">\r\n        <div className=\"modal-content\">\r\n          <div className=\"modal-header\">\r\n            <h5 className=\"modal-title fs-4\" id=\"exampleModalLabel\">\r\n              Edit Row\r\n            </h5>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn-close\"\r\n              data-bs-dismiss=\"modal\"\r\n              aria-label=\"Close\"\r\n            ></button>\r\n          </div>\r\n          <div className=\"card p-3\">\r\n            <table className=\"table\">\r\n              <thead>\r\n                <tr>\r\n                  <th scope=\"col\">#</th>\r\n                  <th scope=\"col\">Customer name</th>\r\n                  <th scope=\"col\">Partner name</th>\r\n                  <th scope=\"col\">Type of work</th>\r\n                  <th scope=\"col\">NÂ° MPR file</th>\r\n                  <th scope=\"col\"></th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <th scope=\"row\">1</th>\r\n                  <td>\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"cName\"\r\n                      className=\"w-100\"\r\n                      value={props.rowToUpdate.cName}\r\n                      onChange={props.rowToUpdateFunc}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"pName\"\r\n                      className=\"w-100\"\r\n                      value={props.rowToUpdate.pName}\r\n                      onChange={props.rowToUpdateFunc}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"type\"\r\n                      className=\"w-100\"\r\n                      value={props.rowToUpdate.type}\r\n                      onChange={props.rowToUpdateFunc}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      type=\"text\"\r\n                      name=\"mpr\"\r\n                      className=\"w-100\"\r\n                      value={props.rowToUpdate.mpr}\r\n                      onChange={props.rowToUpdateFunc}\r\n                    />\r\n                  </td>\r\n                  <td>\r\n                    <button\r\n                      className=\"btn btn-outline-dark shadow-sm fs-6 p-0 px-2\"\r\n                      data-bs-dismiss=\"modal\"\r\n                      onClick={props.updatedRow}\r\n                    >\r\n                      Update\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import { useEffect, useRef, useState } from \"react\";\nimport { CSVLink } from \"react-csv\";\nimport Modal from \"./components/Modal\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [rows, setRows] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [newRow, setNewRow] = useState({\n    cName: \"\",\n    pName: \"\",\n    type: \"\",\n    mpr: \"\",\n  });\n  const [rowToUpdate, setRowToUpdate] = useState({});\n  const [editRowClick, setEditRowClick] = useState(false);\n  const [filter, setFilter] = useState({\n    name: \"\",\n    value: \"\",\n  });\n  var inputElement = useRef(null);\n\n  const fetchData = async () => {\n    const res = await fetch(\"https://dbcontrol-server.herokuapp.com\");\n    const rows = await res.json();\n    return rows;\n  };\n\n  useEffect(() => {\n    fetchData().then((rows) => {\n      setLoading(false);\n      setRows(rows);\n    });\n  }, []);\n\n  useEffect(() => {\n    const canvas = inputElement.current;\n    canvas && canvas.click();\n    setEditRowClick(false);\n  }, [editRowClick]);\n\n  const handleNewRowValues = (event) => {\n    const { name, value } = event.target;\n    setNewRow({ ...newRow, [name]: value });\n  };\n\n  const handleUpdateRowValues = (event) => {\n    const { name, value } = event.target;\n    setRowToUpdate({ ...rowToUpdate, [name]: value });\n  };\n\n  const handleFilterRowValues = (event) => {\n    const { name, value } = event.target;\n    setFilter({ name: name, value: value });\n  };\n\n  const addRow = async () => {\n    setLoading(true);\n    const res = await fetch(\"https://dbcontrol-server.herokuapp.com\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ newRow }),\n    });\n    const savedRow = await res.json();\n    if (res.status === 200) {\n      setRows([...rows, savedRow]);\n    } else {\n      res.status === 404 && alert(\"Error saving to database.\");\n    }\n    setLoading(false);\n  };\n\n  const updatedRow = async () => {\n    setLoading(true);\n    const res = await fetch(\"https://dbcontrol-server.herokuapp.com\", {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ rowToUpdate }),\n    });\n    if (res.status === 200) {\n      var foundIndex = rows.findIndex((x) => x._id === rowToUpdate._id);\n      rows[foundIndex] = rowToUpdate;\n    } else {\n      res.status === 404 && alert(\"Error saving to database.\");\n    }\n    setLoading(false);\n  };\n\n  const deleteRow = async (event) => {\n    setLoading(true);\n    const res = await fetch(\"https://dbcontrol-server.herokuapp.com\", {\n      method: \"DELETE\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ id: event.target.id }),\n    });\n    if (res.status === 200) {\n      setRows(rows.filter((row) => row._id !== event.target.id));\n    } else {\n      res.status === 405 && alert(\"Error deleting.\");\n    }\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"text-center my-5\">\n        <div className=\"card shadow\">\n          <div className=\"card-body\">\n            <h1 className=\"display-5\">Data List</h1>\n          </div>\n        </div>\n      </div>\n      <div className=\"card p-3\">\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th>\n                <h4 className=\"fs-5 mb-1\">Filter</h4>\n              </th>\n\n              <td>\n                <input\n                  type=\"text\"\n                  name=\"cName\"\n                  className=\"w-50 shadow-sm btn-outline-success\"\n                  onChange={handleFilterRowValues}\n                />\n              </td>\n              <td>\n                <input\n                  type=\"text\"\n                  name=\"pName\"\n                  className=\"w-50 shadow-sm btn-outline-success\"\n                  onChange={handleFilterRowValues}\n                />\n              </td>\n              <td>\n                <input\n                  type=\"text\"\n                  name=\"type\"\n                  className=\"w-50 shadow-sm btn-outline-success\"\n                  onChange={handleFilterRowValues}\n                />\n              </td>\n              <td>\n                <input\n                  type=\"text\"\n                  name=\"mpr\"\n                  className=\"w-50 shadow-sm btn-outline-success\"\n                  onChange={handleFilterRowValues}\n                />\n              </td>\n            </tr>\n            <tr>\n              <th scope=\"col\">#</th>\n              <th scope=\"col\">Customer name</th>\n              <th scope=\"col\">Partner name</th>\n              <th scope=\"col\">Type of work</th>\n              <th scope=\"col\">NÂ° MPR file</th>\n              <th scope=\"col\"></th>\n            </tr>\n          </thead>\n          <tbody>\n            {loading ? (\n              <p className=\"fs-4 text-center\">Loading..</p>\n            ) : rows.length > 0 ? (\n              rows\n                .filter((row) =>\n                  filter.name\n                    ? row[filter.name]\n                        .toLowerCase()\n                        .includes(filter.value.toLowerCase())\n                    : row\n                )\n                .map((row, index) => (\n                  <tr key={row._id}>\n                    <th scope=\"row\">{index + 1}</th>\n                    <td>{row.cName}</td>\n                    <td>{row.pName}</td>\n                    <td>{row.type}</td>\n                    <td>{row.mpr}</td>\n                    <td>\n                      <Modal\n                        rowToUpdate={rowToUpdate}\n                        rowToUpdateFunc={handleUpdateRowValues}\n                        updatedRow={updatedRow}\n                      />\n                      <button\n                        type=\"button\"\n                        className=\"btn zoom\"\n                        aria-label=\"Edit\"\n                        onClick={() => (\n                          setRowToUpdate(row), setEditRowClick(true)\n                        )}\n                      >\n                        â\n                      </button>\n                      <button\n                        type=\"button\"\n                        className=\"d-none\"\n                        ref={inputElement}\n                        id={row._id}\n                        data-bs-toggle=\"modal\"\n                        data-bs-target=\"#exampleModal\"\n                      ></button>\n                      <button\n                        type=\"button\"\n                        className=\"btn-close fs-8 zoom\"\n                        aria-label=\"Close\"\n                        id={row._id}\n                        onClick={deleteRow}\n                      ></button>\n                    </td>\n                  </tr>\n                ))\n            ) : (\n              <div className=\"justify-content-center d-flex text-center\">\n                <h4 className=\"fst-italic text-center\">(Empty List)</h4>\n              </div>\n            )}\n            <tr>\n              <th>\n                <button\n                  className=\"btn btn-outline-dark shadow-sm fs-6 p-0 px-1\"\n                  onClick={addRow}\n                >\n                  Add\n                </button>\n              </th>\n\n              <td>\n                <input\n                  type=\"text\"\n                  name=\"cName\"\n                  value={newRow.cName}\n                  onChange={handleNewRowValues}\n                />\n              </td>\n              <td>\n                <input\n                  type=\"text\"\n                  name=\"pName\"\n                  value={newRow.pName}\n                  onChange={handleNewRowValues}\n                />\n              </td>\n              <td>\n                <input\n                  type=\"text\"\n                  name=\"type\"\n                  value={newRow.type}\n                  onChange={handleNewRowValues}\n                />\n              </td>\n              <td>\n                <input\n                  type=\"text\"\n                  name=\"mpr\"\n                  value={newRow.mpr}\n                  onChange={handleNewRowValues}\n                />\n              </td>\n              <td>\n                <CSVLink data={rows}>\n                  <button className=\"btn btn-outline-dark shadow-sm fs-6 p-0 px-1 ms-4\">\n                    Csv\n                  </button>\n                </CSVLink>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}